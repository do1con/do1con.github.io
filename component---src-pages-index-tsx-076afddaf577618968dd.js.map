{"version":3,"file":"component---src-pages-index-tsx-076afddaf577618968dd.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/context/combineContext.ts","webpack://gatsby-starter-default/./src/components/Common/PostCard.tsx","webpack://gatsby-starter-default/./src/components/Common/PostList.tsx","webpack://gatsby-starter-default/./src/components/Common/CategorySelector.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import { useContext as callContext } from 'react';\r\nimport { Context, DispatchContext } from './index';\r\n\r\nexport function useContext() {\r\n  const state = callContext(Context);\r\n  if (!state) throw new Error('Provider not found');\r\n  return state;\r\n}\r\n\r\nexport function useDispatch() {\r\n  const dispatch = callContext(DispatchContext);\r\n  if (!dispatch) throw new Error('Dispatch not found');\r\n  return dispatch;\r\n}\r\n","import React from 'react';\r\nimport { postType } from 'context/InitalState';\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport { Link } from 'gatsby';\r\n\r\ninterface propTypes {\r\n  postData: postType;\r\n}\r\n\r\nconst PostCard: React.FC<propTypes> = ({ postData }) => {\r\n  const { frontmatter } = postData.node;\r\n  const imageInfo = frontmatter.featuredImage.childImageSharp.gatsbyImageData;\r\n  return (\r\n    <div>\r\n      <Link to={frontmatter.slug}>\r\n        <div className=\"flex w-full my-8\">\r\n          <GatsbyImage\r\n            image={imageInfo as IGatsbyImageData}\r\n            alt=\"hi\"\r\n            className=\"mr-4\"\r\n          />\r\n          <div>\r\n            <h2 className=\"font-extrabold text-xl block\">\r\n              {frontmatter.title}\r\n            </h2>\r\n            <p className=\"text-xs text-gray-400 block my-1\">\r\n              작성일 : {frontmatter.date}\r\n            </p>\r\n            <p className=\"text-sm text-gray-700 my-1\">{frontmatter.summary}</p>\r\n            <p className=\"text-xs text-green-400 my-1\">자세히 알아보기 →</p>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","import React from 'react';\r\nimport PostCard from 'components/Common/PostCard';\r\nimport { postType } from 'context/InitalState';\r\n\r\ninterface propTypes {\r\n  postList: postType[];\r\n  selectedCategory: string;\r\n}\r\n\r\nconst PostList: React.FC<propTypes> = ({ postList, selectedCategory }) => {\r\n  const postCardList: (JSX.Element | undefined)[] = postList.map(\r\n    (data: postType, key: number) => {\r\n      const returnElement = (\r\n        <li key={key} className=\"my-2\">\r\n          <PostCard postData={data} />\r\n        </li>\r\n      );\r\n      if (selectedCategory === 'All') return returnElement;\r\n      const { categories } = data.node.frontmatter;\r\n      if (categories.indexOf(selectedCategory) >= 0) return returnElement;\r\n      return;\r\n    },\r\n  );\r\n  return <ul>{postCardList}</ul>;\r\n};\r\n\r\nexport default PostList;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { useDispatch } from 'context/combineContext';\r\n\r\ntype propTypes = {\r\n  categories: string[];\r\n  selectedCategory: string;\r\n};\r\n\r\nconst CategorySelector: React.FC<propTypes> = ({\r\n  categories,\r\n  selectedCategory,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [listHeight, setListHeight] = useState<number>(0);\r\n  const [showEllipsis, setShowEllipsis] = useState<boolean>(false);\r\n  const CategoryListBox = useRef<HTMLUListElement>(null);\r\n  useEffect(() => {\r\n    handleResize();\r\n    window.addEventListener('resize', handleResize);\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log('처음 로드때 여기 안와?', listHeight);\r\n    if (listHeight >= 48) {\r\n      setShowEllipsis(true);\r\n    } else {\r\n      setShowEllipsis(false);\r\n    }\r\n  }, [listHeight]);\r\n  const handleResize = () => {\r\n    if (CategoryListBox.current) {\r\n      setListHeight(CategoryListBox.current.clientHeight);\r\n    }\r\n  };\r\n  const onClickCategoryItem = (event: React.MouseEvent<HTMLLIElement>) => {\r\n    const target = event.target as HTMLElement;\r\n    const categoryName: string = target.innerHTML.replace('#', '');\r\n    dispatch({\r\n      type: 'UPDATE_SELECTED_CATEGORY',\r\n      value: categoryName,\r\n    });\r\n  };\r\n  const onClickEllipsis = () => {\r\n    setShowEllipsis(!showEllipsis);\r\n  };\r\n  const CategoryList: (JSX.Element | undefined)[] = categories.map(\r\n    (data: string, key: number) => {\r\n      return (\r\n        <CategoryItem\r\n          selected={data === selectedCategory}\r\n          key={key}\r\n          onClick={onClickCategoryItem}\r\n        >\r\n          #{data}\r\n        </CategoryItem>\r\n      );\r\n    },\r\n  );\r\n  return (\r\n    <div className=\"m-4\">\r\n      <ul\r\n        className={`flex flex-wrap overflow-hidden ${\r\n          showEllipsis ? 'max-h-full' : 'max-h-full'\r\n        }`}\r\n        ref={CategoryListBox}\r\n      >\r\n        <CategoryItem\r\n          selected={selectedCategory === 'All'}\r\n          onClick={onClickCategoryItem}\r\n        >\r\n          #All\r\n        </CategoryItem>\r\n        {CategoryList}\r\n      </ul>\r\n      {showEllipsis && (\r\n        <EllipsisButton onClick={onClickEllipsis}>...더 보기</EllipsisButton>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CategoryItem = styled.li<{ selected: boolean }>`\r\n  display: block;\r\n  margin: 0.5rem;\r\n  color: ${props => (props.selected ? '#242a33' : '#757d85')};\r\n  font-weight: ${props => (props.selected ? 'bold' : 'normal')};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst EllipsisButton = styled.button`\r\n  margin: 0.75rem;\r\n  display: block;\r\n  color: #757d85;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default CategorySelector;\r\n","import React, { useEffect } from 'react';\r\nimport { useContext, useDispatch } from 'context/combineContext';\r\nimport { graphql } from 'gatsby';\r\nimport { postType } from 'context/InitalState';\r\nimport PostList from 'components/Common/PostList';\r\nimport CategorySelector from 'components/Common/CategorySelector';\r\n\r\ninterface propTypes {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: Array<postType>;\r\n    };\r\n  };\r\n}\r\n\r\nconst IndexPage: React.FC<propTypes> = ({ data }) => {\r\n  const { categories, postNumber, posts, selectedCategory } = useContext();\r\n  const dispatch = useDispatch();\r\n  const postList: postType[] = data.allMarkdownRemark.edges;\r\n  useEffect(() => {\r\n    const unOrganizedCategories: string[] = [''].concat(\r\n      ...postList.map(category => category.node.frontmatter.categories),\r\n    );\r\n    const categoryList: string[] = unOrganizedCategories.filter(\r\n      (item, index) => unOrganizedCategories.indexOf(item) === index,\r\n    );\r\n    categoryList.shift();\r\n    dispatch({\r\n      type: 'UPDATE_CATEGORIES',\r\n      value: categoryList,\r\n    });\r\n    dispatch({\r\n      type: 'UPDATE_POSTNUMBER',\r\n      value: postList.length,\r\n    });\r\n    dispatch({\r\n      type: 'UPDATE_POSTS',\r\n      value: postList,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <CategorySelector\r\n        categories={categories}\r\n        selectedCategory={selectedCategory}\r\n      />\r\n      <PostList postList={postList} selectedCategory={selectedCategory} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query getPostList {\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail\r\n            slug\r\n            featuredImage {\r\n              childImageSharp {\r\n                gatsbyImageData(width: 110, height: 110)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["useDispatch","dispatch","callContext","DispatchContext","Error","frontmatter","postData","node","imageInfo","featuredImage","childImageSharp","gatsbyImageData","to","slug","className","G","image","alt","title","date","summary","postList","selectedCategory","postCardList","map","data","key","returnElement","categories","indexOf","CategoryItem","props","selected","EllipsisButton","useState","listHeight","setListHeight","showEllipsis","setShowEllipsis","CategoryListBox","useRef","useEffect","handleResize","window","addEventListener","removeEventListener","console","log","current","clientHeight","onClickCategoryItem","event","categoryName","target","innerHTML","replace","type","value","CategoryList","onClick","ref","state","Context","useContext","postNumber","posts","allMarkdownRemark","edges","unOrganizedCategories","concat","category","categoryList","filter","item","index","shift","length"],"sourceRoot":""}