{"version":3,"file":"component---src-pages-markdown-remark-frontmatter-slug-js-0eefdb9f3df9275b6330.js","mappings":"oMAQMA,EAAyCC,EAAAA,MAAW,YAAe,IAAZC,EAAW,EAAXA,KACrDC,GAAeC,EAAAA,EAAAA,aAsBrB,OApBAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAaC,SAASC,cAAc,UAEpCC,EAAa,CACjBC,IAbM,gCAcNR,KAAAA,EACA,aAAc,WACdS,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQP,GAAYQ,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDb,EAAWc,aAAaF,EAAKC,MAG/BhB,MAAAA,GAAA,UAAAA,EAAckB,eAAd,SAAuBC,YAAYhB,KAClC,CAACJ,KAEG,eAAKqB,IAAKpB,OAGnBH,EAAWwB,YAAc,aAEzB,QC1Be,SAASC,EAAT,GAEX,IADFC,EACC,EADDA,KAEQC,EAAsCD,EAAtCC,eAAgBC,EAAsBF,EAAtBE,kBAChBC,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACrB,GAAkDC,EAAAA,EAAAA,UAAS,GAApDC,EAAP,KAA0BC,EAA1B,KACA,GAA0CF,EAAAA,EAAAA,WAAS,GAA5CG,EAAP,KAAsBC,EAAtB,KACA,GAA0CJ,EAAAA,EAAAA,WAAS,GAA5CK,EAAP,KAAsBC,EAAtB,MACAhC,EAAAA,EAAAA,YAAU,WACR,IAAM2B,EAAoBM,OACxBT,EAAYU,KAAKC,UAAUX,EAAYU,KAAKE,QAAQ,KAAO,IAE7DR,EAAqBD,GACrBG,EAAiBO,EAAmBV,EAAmBJ,IACvDS,EAAiBM,EAAmBX,EAAmBJ,MACtD,IACH,IAAMc,EAAqB,SAACV,EAAmBY,GAC7C,IAAMC,EAASD,EAASE,MAAMC,QAAO,SAAArB,GACnC,IAAMsB,EAAaV,OACjBZ,EAAKuB,KAAKpB,YAAYU,KAAKC,UACzBd,EAAKuB,KAAKpB,YAAYU,KAAKE,QAAQ,KAAO,IAG9C,GAAIT,EAAoB,IAAMgB,EAAY,OAAO,KAEnD,OAAOE,QAAQL,EAAOM,SAElBR,EAAqB,SAACX,EAAmBY,GAC7C,IAAMC,EAASD,EAASE,MAAMC,QAAO,SAAArB,GACnC,IAAMsB,EAAaV,OACjBZ,EAAKuB,KAAKpB,YAAYU,KAAKC,UACzBd,EAAKuB,KAAKpB,YAAYU,KAAKE,QAAQ,KAAO,IAG9C,GAAIT,EAAoB,IAAMgB,EAAY,OAAO,KAEnD,OAAOE,QAAQL,EAAOM,SAExB,OACE,eAAKC,UAAU,YACb,QAACC,EAAA,EAAD,CACEC,KAAM,GACNC,MAAO1B,EAAY0B,MACnBC,YAAa3B,EAAY4B,QACzBC,WAAY7B,EAAY6B,WACxBC,MACE9B,EAAY+B,cAAcC,gBAAgBC,gBAAgBC,OACvDC,SAAStD,OAGhB,cAAI0C,UAAU,sCACXvB,EAAY0B,QAEf,aAAGH,UAAU,oCAAb,QACQvB,EAAYoC,OAEpB,eAAKb,UAAU,6BACb,eAAKA,UAAU,cACb,eACEA,UAAU,yCACVc,wBAAyB,CAAEC,OAAQrC,QAIzC,eAAKsB,UAAU,4BACZlB,IACC,QAAC,EAAAkC,KAAD,CACEC,GAAE,UAAWrC,EAAoB,GACjCoB,UAAU,gHAFZ,SAOF,QAAC,EAAAgB,KAAD,CACEC,GAAG,IACHjB,UAAU,gHAFZ,QAMChB,IACC,QAAC,EAAAgC,KAAD,CACEC,GAAE,UAAWrC,EAAoB,GACjCoB,UAAU,gHAFZ,UAQJ,QAAC,EAAD,CAAYlD,KAAK","sources":["webpack://ksss_blog/./src/components/Common/Utterances.tsx","webpack://ksss_blog/./src/pages/{MarkdownRemark.frontmatter__slug}.js"],"sourcesContent":["import React, { createRef, useEffect } from 'react';\r\n\r\nconst src = 'https://utteranc.es/client.js';\r\n\r\nexport interface IUtterancesProps {\r\n  repo: string;\r\n}\r\n\r\nconst Utterances: React.FC<IUtterancesProps> = React.memo(({ repo }) => {\r\n  const containerRef = createRef<HTMLDivElement>();\r\n\r\n  useEffect(() => {\r\n    const utterances = document.createElement('script');\r\n\r\n    const attributes = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: 'github-light',\r\n      crossOrigin: 'anonymous',\r\n      async: 'true',\r\n    };\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value);\r\n    });\r\n\r\n    containerRef?.current?.appendChild(utterances);\r\n  }, [repo]);\r\n\r\n  return <div ref={containerRef} />;\r\n});\r\n\r\nUtterances.displayName = 'Utterances';\r\n\r\nexport default Utterances;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport { Link } from 'gatsby';\r\nimport Helmet from 'components/Layouts/Helmet';\r\nimport Utterances from 'components/Common/Utterances';\r\nimport '../styles/base.min.css';\r\nimport '../styles/components.min.css';\r\nimport '../styles/typography.min.css';\r\nimport '../styles/utilities.min.css';\r\n\r\nexport default function Template({\r\n  data, // this prop will be injected by the GraphQL query below.\r\n}) {\r\n  const { markdownRemark, allMarkdownRemark } = data; // data.markdownRemark holds your post data\r\n  const { frontmatter, html } = markdownRemark;\r\n  const [currentPageNumber, setCurrentPageNumber] = useState(0);\r\n  const [prevPageExist, setPrevPageExist] = useState(false);\r\n  const [nextPageExist, setNextPageExist] = useState(false);\r\n  useEffect(() => {\r\n    const currentPageNumber = Number(\r\n      frontmatter.slug.substring(frontmatter.slug.indexOf('/') + 1),\r\n    );\r\n    setCurrentPageNumber(currentPageNumber);\r\n    setPrevPageExist(checkPrevPageExist(currentPageNumber, allMarkdownRemark));\r\n    setNextPageExist(checkNextPageExist(currentPageNumber, allMarkdownRemark));\r\n  }, []);\r\n  const checkPrevPageExist = (currentPageNumber, allPosts) => {\r\n    const result = allPosts.edges.filter(data => {\r\n      const pageNumber = Number(\r\n        data.node.frontmatter.slug.substring(\r\n          data.node.frontmatter.slug.indexOf('/') + 1,\r\n        ),\r\n      );\r\n      if (currentPageNumber - 1 === pageNumber) return true;\r\n    });\r\n    return Boolean(result.length);\r\n  };\r\n  const checkNextPageExist = (currentPageNumber, allPosts) => {\r\n    const result = allPosts.edges.filter(data => {\r\n      const pageNumber = Number(\r\n        data.node.frontmatter.slug.substring(\r\n          data.node.frontmatter.slug.indexOf('/') + 1,\r\n        ),\r\n      );\r\n      if (currentPageNumber + 1 === pageNumber) return true;\r\n    });\r\n    return Boolean(result.length);\r\n  };\r\n  return (\r\n    <div className=\"mx-auto\">\r\n      <Helmet\r\n        meta={[]}\r\n        title={frontmatter.title}\r\n        description={frontmatter.summary}\r\n        categories={frontmatter.categories}\r\n        image={\r\n          frontmatter.featuredImage.childImageSharp.gatsbyImageData.images\r\n            .fallback.src\r\n        }\r\n      />\r\n      <h2 className=\"font-extrabold text-3xl block my-3\">\r\n        {frontmatter.title}\r\n      </h2>\r\n      <p className=\"text-xs text-gray-500 block my-3\">\r\n        작성일: {frontmatter.date}\r\n      </p>\r\n      <div className=\"blog-post-container mb-4\">\r\n        <div className=\"blog-post\">\r\n          <div\r\n            className=\"blog-post-content prose max-w-full p-2\"\r\n            dangerouslySetInnerHTML={{ __html: html }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"flex justify-center my-3\">\r\n        {prevPageExist && (\r\n          <Link\r\n            to={`/post/${currentPageNumber - 1}`}\r\n            className=\"p-2 text-sm border-solid border rounded-md border-gray-400 bg-white hover:bg-green-500 hover:text-white mx-2\"\r\n          >\r\n            이전 글\r\n          </Link>\r\n        )}\r\n        <Link\r\n          to=\"/\"\r\n          className=\"p-2 text-sm border-solid border rounded-md border-gray-400 bg-white hover:bg-green-500 hover:text-white mx-2\"\r\n        >\r\n          글 목록\r\n        </Link>\r\n        {nextPageExist && (\r\n          <Link\r\n            to={`/post/${currentPageNumber + 1}`}\r\n            className=\"p-2 text-sm border-solid border rounded-md border-gray-400 bg-white hover:bg-green-500 hover:text-white mx-2\"\r\n          >\r\n            다음 글\r\n          </Link>\r\n        )}\r\n      </div>\r\n      <Utterances repo=\"do1con/do1con.github.io\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n// frontmatter.featuredImage.childImageSharp.gatsbyImageData\r\nexport const pageQuery = graphql`\r\n  query ($id: String!) {\r\n    markdownRemark(id: { eq: $id }) {\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        slug\r\n        title\r\n        summary\r\n        categories\r\n        featuredImage {\r\n          childImageSharp {\r\n            gatsbyImageData(width: 110, height: 110)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            slug\r\n            categories\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["Utterances","React","repo","containerRef","createRef","useEffect","utterances","document","createElement","attributes","src","label","theme","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","current","appendChild","ref","displayName","Template","data","markdownRemark","allMarkdownRemark","frontmatter","html","useState","currentPageNumber","setCurrentPageNumber","prevPageExist","setPrevPageExist","nextPageExist","setNextPageExist","Number","slug","substring","indexOf","checkPrevPageExist","checkNextPageExist","allPosts","result","edges","filter","pageNumber","node","Boolean","length","className","Helmet","meta","title","description","summary","categories","image","featuredImage","childImageSharp","gatsbyImageData","images","fallback","date","dangerouslySetInnerHTML","__html","Link","to"],"sourceRoot":""}