{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-js",
    "path": "/post/3/",
    "result": {"data":{"markdownRemark":{"html":"<p>과거에 작성된 글입니다.</p>\n<h2>쓰로틀링이란 무엇인가?</h2>\n<p>쓰로틀링은 주로 이벤트 등에 사용되는 프로그래밍 기법입니다.</p>\n<p>흔히 스크롤 액션 같은 이벤트에 사용됩니다.</p>\n<h2>쓰로틀링의 작동 방식</h2>\n<p>쓰로틀링의 정의를 간단하게 짚고 넘어가겠습니다.</p>\n<blockquote>\n<p>함수가 호출된 후 일정 시간동안 함수가 다시 호출되지 않도록 막는 것.</p>\n</blockquote>\n<p>여기서 <strong>일정 시간</strong>동안 함수 호출을 막는다는 것이 핵심입니다.</p>\n<p>아래와 같은 scroll 이벤트를 봅시다.\r\nbox가 scroll 될 때마다 display 속성이 none~block으로 토글되는 이벤트입니다.</p>\n<pre><code class=\"language-javascript\">let targetState = true;\r\n\r\nfunction eventScroll() {\r\n  const target = document.querySelector('.box');\r\n  targetState = !targetState;\r\n  if (targetState) {\r\n    target.style.display = 'block';\r\n  } else {\r\n    target.style.display = 'none';\r\n  }\r\n  console.log('scroll!!');\r\n}\n</code></pre>\n<hr>\n<p><img src=\"/ca7f3fefff89c25f80261ba93d853a51/post-3-1.gif\" alt=\"show_toggle_event\"></p>\n<p><em>scroll 이벤트가 쉬지 않고 발생한다.</em></p>\n<p>클라이언트 입장에서는 충분히 스크롤을 마구 굴릴 수 있습니다. 이렇게 되면 정성스럽게 짜놓은 이벤트 함수가 고장날 수도 있습니다. (특히 복잡하다면)</p>\n<p>그래서 이런 이벤트에 필요한 기법이 쓰로틀링입니다. 쓰로틀링이란 event 함수를 일정 주기동안 제한하는 기법이라 앞서 언급했습니다.</p>\n<p>위와 같은 상황에선, 스크롤 이벤트가 발생한 후 일정시간동안 scroll이벤트가 다시 발생하지 않도록 제한하는 것이 되겠죠.</p>\n<p>위 코드에 쓰로틀링을 추가해보겠습니다.</p>\n<pre><code class=\"language-javascript\">let targetState = true;\r\nlet timer;\r\n\r\nfunction eventScroll() {\r\n  if (!timer) {\r\n    timer = setTimeout(() => {\r\n      const target = document.querySelector('.box');\r\n      targetState = !targetState;\r\n      if (targetState) {\r\n        target.style.display = 'block';\r\n      } else {\r\n        target.style.display = 'none';\r\n      }\r\n      console.log('scroll!!');\r\n      timer = null;\r\n    }, 1000);\r\n  }\r\n}\n</code></pre>\n<hr>\n<p><img src=\"/b44d05a099cf229e8f54a00305e23640/post-3-2.gif\" alt=\"show_toggle_event2\"></p>\n<p><em>이벤트가 1초에 한 번씩만 작동하고 있다.</em></p>\n<p>setTimeout 함수를 이용하는 방법입니다. 이벤트가 발생할 때마다 timer에는 수행할 로직이 지정되고, 모든 일을 마친 후 스스로 초기화 합니다. 이 과정에 setTimeout함수가 끼어들어 1000ms라는 딜레이를 부여합니다.</p>\n<p>저는 1000ms로 지정했지만, 딜레이 간격은 얼마든지 수정할 수 있습니다.</p>","frontmatter":{"date":"November 01, 2019","slug":"post/3","title":"Javascript - 쓰로틀링(throttling)","summary":"자바스크립트의 이벤트를 어떻게 효율적으로 관리할까? 쓰로틀링이란 무엇이고 어떻게 사용하는지 알아보자.","categories":["Javascript"],"featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8d818","images":{"fallback":{"src":"/static/f00708cb380288f97a3fbfa72862ce1b/1e010/javascript.png","srcSet":"/static/f00708cb380288f97a3fbfa72862ce1b/7a5b8/javascript.png 28w,\n/static/f00708cb380288f97a3fbfa72862ce1b/4c483/javascript.png 55w,\n/static/f00708cb380288f97a3fbfa72862ce1b/1e010/javascript.png 110w,\n/static/f00708cb380288f97a3fbfa72862ce1b/43be6/javascript.png 220w","sizes":"(min-width: 110px) 110px, 100vw"},"sources":[{"srcSet":"/static/f00708cb380288f97a3fbfa72862ce1b/629a0/javascript.webp 28w,\n/static/f00708cb380288f97a3fbfa72862ce1b/938d3/javascript.webp 55w,\n/static/f00708cb380288f97a3fbfa72862ce1b/8c6ff/javascript.webp 110w,\n/static/f00708cb380288f97a3fbfa72862ce1b/4c27b/javascript.webp 220w","type":"image/webp","sizes":"(min-width: 110px) 110px, 100vw"}]},"width":110,"height":110}}}}},"allMarkdownRemark":{"edges":[{"node":{"id":"7e9ff073-14a6-5b47-8908-33cc3e702baf","frontmatter":{"slug":"post/4","categories":["Algorithm"]}}},{"node":{"id":"3c3aef0f-8477-52a1-a098-18b992666a28","frontmatter":{"slug":"post/3","categories":["Javascript"]}}},{"node":{"id":"6b375d7d-60df-5b11-9328-35edb730acf5","frontmatter":{"slug":"post/2","categories":["React"]}}},{"node":{"id":"ac36c884-43da-5aec-b185-c96d412349cc","frontmatter":{"slug":"post/1","categories":["Javascript"]}}}]}},"pageContext":{"id":"3c3aef0f-8477-52a1-a098-18b992666a28","frontmatter__slug":"post/3","__params":{"frontmatter__slug":"post"}}},
    "staticQueryHashes": ["2721053520"]}