{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-js",
    "path": "/post/1/",
    "result": {"data":{"markdownRemark":{"html":"<p>과거 호이스팅에 대해 공부한 후 정리한 글입니다.</p>\n<h3>아래의 코드는 어떻게 작동할까?</h3>\n<pre><code class=\"language-javascript\">if (true) {\r\n  var hey = 'hello';\r\n}\r\n\r\nconsole.log(hey);\n</code></pre>\n<p>일반적인 경우 hey는 if문의 {}영역에서 선언되었으므로 그 밖의 영역에 있는 console.log에서는 호출될 수 없어야 한다.</p>\n<p>그러나 자바스크립트는 그렇지 않다. hey변수가 호이스팅 되었기 때문이다.</p>\n<pre><code class=\"language-javascript\">var hey;\r\n\r\nif (true) {\r\n  hey = 'hello';\r\n}\r\n\r\nconsole.log(hey);\n</code></pre>\n<p>호이스팅은 선언과 할당이 분리되는 현상이다.</p>\n<p>var로 선언된 변수는 function block의 최상단으로 선언이 옮겨진다.</p>\n<h2>function block의 최상단?</h2>\n<p>var는 function scope라는 특성을 지니고 있다.\r\n즉 var의 영역은 function이며 함수 최상단에 선언된다는 의미다.</p>\n<pre><code class=\"language-javascript\">function hi() {\r\n  if (true) {\r\n    var say = 'hi';\r\n  }\r\n  console.log(say);\r\n}\n</code></pre>\n<p>이 코드에서 var say는 function hi에 속해있다. 그러므로 런타임에서는</p>\n<pre><code class=\"language-javascript\">function hi() {\r\n  var say; //선언\r\n  if (true) {\r\n    say = 'hi'; // 할당\r\n  }\r\n  console.log(say);\r\n}\n</code></pre>\n<p>이렇게 변경되어 실행된다.</p>\n<p>이는 var 변수가 어떤 방식으로 선언되던 상관없이 적용된다.</p>\n<pre><code class=\"language-javascript\">function bye() {\r\n  for (var i = 0; i &#x3C; 10; i++) {\r\n    // blah blah\r\n  }\r\n}\n</code></pre>\n<p>이렇게 반복문에 선언된 변수도 마찬가지다.</p>\n<pre><code class=\"language-javascript\">function bye() {\r\n  var i; // 선언\r\n  for (i = 0; i &#x3C; 10; i++) {\r\n    // 할당\r\n    // blah blah\r\n  }\r\n}\n</code></pre>\n<h2>함수표현식과 호이스팅</h2>\n<pre><code class=\"language-javascript\">hi();\r\n\r\nvar hi = function () {\r\n  console.log('hi');\r\n};\n</code></pre>\n<p>이렇게 함수 표현식으로 선언하더라도 호이스팅이 적용된다</p>\n<pre><code class=\"language-javascript\">var hi;\r\n\r\nhi(); // error! hi 함수에는 아직 함수표현식이 할당되지 않았음\r\n\r\nhi = function () {\r\n  console.log('hi');\r\n};\n</code></pre>\n<h2>대안은 없을까?</h2>\n<p>호이스팅은 javascript를 유연하게 실행되도록 돕지만, 동시에 기존에 다른 프로그래밍 언어를 공부한 개발자에겐 햇갈리는 요소가 될 수 있다.</p>\n<p>때문에, 통상적인 블록스코프를 따르는 변수모델로 let, const가 제시되었다.</p>\n<pre><code class=\"language-javascript\">function hi() {\r\n  if (true) {\r\n    const say = 'hi';\r\n  }\r\n  console.log(say); // error!\r\n}\n</code></pre>\n<p>let과 const는 전형적인 block scope를 가졌기 때문에 if문 밖에서 호출될 경우 에러를 발생시킨다.</p>\n<h2>함수와 호이스팅</h2>\n<pre><code class=\"language-javascript\">hi();\r\n\r\nfunction hi() {\r\n  console.log('hi');\r\n}\n</code></pre>\n<p>자바스크립트에서는 이런 코드도 실행된다. 분명 호출이 선언보다 앞섰는데도 말이다.</p>\n<p>이런 일이 가능한 이유는 함수도 호이스팅에 적용되기 때문이다. 함수 선언문은 반드시 최상단으로 끌어올려진다.\r\n위 코드는 런타임에선 다음과 같이 실행된다.</p>\n<pre><code class=\"language-javascript\">function hi() {\r\n  console.log('hi');\r\n}\r\n\r\nhi();\n</code></pre>\n<h2>함수와 var변수의 호이스팅 우선순위는?</h2>\n<p>간단하게, 변수 호이스팅이 함수 호이스팅보다 먼저 일어난다.</p>\n<pre><code class=\"language-javascript\">hi();\r\n\r\nfunction hi() {\r\n  var hiMessage = 'hi';\r\n  console.log(message);\r\n}\r\n\r\nconsole.log(byeMessage);\r\n\r\nvar byeMessage = 'bye';\n</code></pre>\n<p>그러므로 이 코드는 런타임에서</p>\n<pre><code class=\"language-javascript\">var byeMessage;\r\nfunction hi() {\r\n  var hiMessage;\r\n  hiMessage = 'hi'; // 선언과 할당은 분리된다.\r\n  console.log(message); // hi.\r\n}\r\n\r\nhi();\r\n\r\nbyeMessage = 'bye';\n</code></pre>\n<p>이렇게 해석된다.</p>","frontmatter":{"date":"October 07, 2019","slug":"post/1","title":"Javascript - 호이스팅","summary":"자바스크립트에서 호이스팅은 어떻게 작동할까? 호이스팅의 개념과 그 우선순위까지 알아보자.","categories":["Javascript"],"featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8d818","images":{"fallback":{"src":"/static/f00708cb380288f97a3fbfa72862ce1b/1e010/javascript.png","srcSet":"/static/f00708cb380288f97a3fbfa72862ce1b/7a5b8/javascript.png 28w,\n/static/f00708cb380288f97a3fbfa72862ce1b/4c483/javascript.png 55w,\n/static/f00708cb380288f97a3fbfa72862ce1b/1e010/javascript.png 110w,\n/static/f00708cb380288f97a3fbfa72862ce1b/43be6/javascript.png 220w","sizes":"(min-width: 110px) 110px, 100vw"},"sources":[{"srcSet":"/static/f00708cb380288f97a3fbfa72862ce1b/629a0/javascript.webp 28w,\n/static/f00708cb380288f97a3fbfa72862ce1b/938d3/javascript.webp 55w,\n/static/f00708cb380288f97a3fbfa72862ce1b/8c6ff/javascript.webp 110w,\n/static/f00708cb380288f97a3fbfa72862ce1b/4c27b/javascript.webp 220w","type":"image/webp","sizes":"(min-width: 110px) 110px, 100vw"}]},"width":110,"height":110}}}}},"allMarkdownRemark":{"edges":[{"node":{"id":"9ca39c47-43cc-5583-bfc2-0370f87b89da","frontmatter":{"slug":"post/3","categories":["Web","SEO","Optimization","Javascript"]}}},{"node":{"id":"a9540254-b71a-54b7-850e-17969ea0e7ee","frontmatter":{"slug":"post/2","categories":["Web","SEO","Optimization","Javascript","카테","엄청","길다면!@?#!?@%$?!@#%?!?%@#?%!?#%","일이 벌어질까?","이런 쓸모없는"]}}},{"node":{"id":"ac36c884-43da-5aec-b185-c96d412349cc","frontmatter":{"slug":"post/1","categories":["Javascript"]}}}]}},"pageContext":{"id":"ac36c884-43da-5aec-b185-c96d412349cc","frontmatter__slug":"post/1","__params":{"frontmatter__slug":"post"}}},
    "staticQueryHashes": ["2721053520"]}